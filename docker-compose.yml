services:
  api:
    build: ./api
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      timescale:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3000/health').then(r=>{if(!r.ok)process.exit(1);}).catch(()=>process.exit(1));"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - default

  timescale:
    image: timescale/timescaledb-ha:pg16.4
    environment:
      POSTGRES_DB: energy
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - default

  neo4j:
    image: neo4j:5.19-community
    environment:
      NEO4J_AUTH: neo4j/TroqueNeo4j!
      NEO4J_dbms_security_auth__enabled: "true"
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a bolt://localhost:7687 -u neo4j -p TroqueNeo4j! 'RETURN 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s
    networks:
      - default

  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t healthcheck -m ok"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - default

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  timescale_data:
  neo4j_data:
